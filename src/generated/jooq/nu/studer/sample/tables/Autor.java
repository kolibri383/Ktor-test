/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import javax.annotation.processing.Generated;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Autor extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.autor</code>
     */
    public static final Autor AUTOR = new Autor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.autor.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.autor.first_name</code>.
     */
    public final TableField<Record, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.autor.lasr_name</code>.
     */
    public final TableField<Record, String> LASR_NAME = createField(DSL.name("lasr_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL::character varying", SQLDataType.VARCHAR)), this, "");

    private Autor(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Autor(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.autor</code> table reference
     */
    public Autor(String alias) {
        this(DSL.name(alias), AUTOR);
    }

    /**
     * Create an aliased <code>public.autor</code> table reference
     */
    public Autor(Name alias) {
        this(alias, AUTOR);
    }

    /**
     * Create a <code>public.autor</code> table reference
     */
    public Autor() {
        this(DSL.name("autor"), null);
    }

    public <O extends Record> Autor(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, AUTOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.AUTOR_PKEY;
    }

    @Override
    public Autor as(String alias) {
        return new Autor(DSL.name(alias), this);
    }

    @Override
    public Autor as(Name alias) {
        return new Autor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Autor rename(String name) {
        return new Autor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Autor rename(Name name) {
        return new Autor(name, null);
    }
}
